using System.Collections;
using System.Collections.Generic;
using Brian_Stuff;
using UnityEngine;
using UnityEngine.UI;

public class TakeAway : MonoBehaviour
{
    public GameObject cardStack;

    //public GameObject startUI;
    public GameObject infoUI; //the gameobject variable holding the constant UI
    //public GameObject appManager; //the gameobject variable holding the app manager

    GameObject myGO; //the gameObject that creates the temporary canvas

    public float resoX; //stores the x value of the current screen resolution
    public float resoY; //stores the y value of the current screen resolution

    //public int numOfThings;


    // Start is called before the first frame update
    void Start()
    {
        
    }

    // Update is called once per frame
    void Update()
    {
        
    }

    public void TakeSlides()
    {
        if (!infoUI.activeSelf) //if the infoUI is currently inactive
        {
            infoUI.SetActive(true); //set the infoUI to active
            
            myGO = new GameObject(); //sets the myGO object as a new game object
            myGO.name = "TestCanvas"; //names the myGO object "TestCanvas" in the heirarchy
            myGO.AddComponent<CanvasScaler>(); // add a canvas scaler to the myGO object
            myGO.AddComponent<GraphicRaycaster>(); // add a graphic raycaster to the myGO object
            myGO.GetComponent<Canvas>().renderMode = infoUI.GetComponent<Canvas>().renderMode; //set the render mode of the myGO canvas to that of the infoUI
            resoX = (float) Screen.currentResolution.width; //sets resoX to the current x value of the screen resolution
            resoY = (float) Screen.currentResolution.height; //sets resoY to the current y value of the screen resolution
            myGO.GetComponent<CanvasScaler>().uiScaleMode = infoUI.GetComponent<CanvasScaler>().uiScaleMode; //set the ui scale mode of myGO's canvas scaler to that of the infoUI
            myGO.GetComponent<CanvasScaler>().referenceResolution =
                new Vector2(resoX,
                    resoY); //sets the reference resolution of myGO canvas to the same x and y values as resoX and resoY

            GameObject spawnStack = Instantiate(cardStack.GetComponent<CardStackTest>()
                .cards[cardStack.GetComponent<CardStackTest>()._cardArrayOffset].GetChild(0).gameObject); //declare game object spawn stack and set it equal to an instantiated copy of the current slide

            spawnStack.transform.parent = GameObject.Find("TestCanvas").transform; //set the parent of spawnStack to the TestCanvas Object
            spawnStack.GetComponent<RectTransform>().anchoredPosition = new Vector3(0f, -50f, 0f); //set the anchored position of the spawnStack object to -50 on the y axis
            spawnStack.GetComponent<RectTransform>().rotation = Quaternion.Euler(0f, 0f, 0f); //set the rotation axes of spawnStack to 0,0,0
            spawnStack.GetComponent<RectTransform>().localScale = new Vector3(0.9f, 0.9f, 0.9f); //scale the spawnStack object to all 0.9 to fit the screen

            spawnStack.AddComponent<Draggable>(); //add the draggable script to spawnStack
            spawnStack.AddComponent<PinchZoom>(); //add the pinchZoom script to spawnStack
            //spawnStack is the slide generated by the takeAway button
        }

    }
}
